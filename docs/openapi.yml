
tags:
- 
  name: Admin API
- 
  name: Authenticate API
- 
  name: Member API
- 
  name: SeverManagement API
components: 
  schemas:
    GenericErrorInfo: 
      properties:
        errorMessage: 
          description: 発生した例外に設定されていたメッセージ
          example: 例外のエラーメッセージ
          type: string
        errorReason: 
          description: エラー理由として発生した例外のクラス名を設定
          example: 例外クラス名
          type: string
      description: エラー情報
      type: object
    ValidationErrorInfo: 
      properties:
        errorMessage: 
          description: 発生した例外に設定されていたメッセージ
          example: 例外のエラーメッセージ
          type: string
        errorReason: 
          description: エラー理由として発生した例外のクラス名を設定
          example: 例外クラス名
          type: string
        errorItems: 
          items: 
            $ref: '#/components/schemas/ValidationErrorItem'
          type: array
      description: パラメータチェックエラー情報
      type: object
    ValidationErrorItem: 
      properties:
        fieldName: 
          description: エラーとなった項目
          type: string
        message: 
          description: エラーメッセージ
          type: string
      description: 1件ごとのチェックエラー情報
      type: object
    localDateTime: 
      description: 日時型
      example: 20210314 09:00
      format: yyyyMMdd HH:mm
      type: string
    AddRentalItemDto: 
      required:
      - serialNo
      properties:
        itemName: 
          type: string
        serialNo: 
          type: string
      description: レンタル品登録用DTO
      type: object
    RentalItemResourceDto: 
      required:
      - id
      - serialNo
      properties:
        id: 
          format: int32
          type: integer
        itemName: 
          type: string
        serialNo: 
          type: string
      description: レンタル品DTO
      type: object
    AddReservationDto: 
      required:
      - endDateTime
      - rentalItemId
      - startDateTime
      - userAccountId
      properties:
        endDateTime: 
          $ref: '#/components/schemas/localDateTime'
          format: date-time
          type: string
        note: 
          type: string
        rentalItemId: 
          format: int32
          type: integer
        startDateTime: 
          $ref: '#/components/schemas/localDateTime'
          format: date-time
          type: string
        userAccountId: 
          format: int32
          type: integer
      description: 予約登録用DTO
      type: object
    ReservationResourceDto: 
      required:
      - endDateTime
      - id
      - rentalItemDto
      - rentalItemId
      - startDateTime
      - userAccountDto
      - userAccountId
      properties:
        endDateTime: 
          format: date-time
          type: string
        id: 
          format: int32
          type: integer
        note: 
          type: string
        rentalItemDto: 
          $ref: '#/components/schemas/RentalItemResourceDto'
        rentalItemId: 
          format: int32
          type: integer
        startDateTime: 
          format: date-time
          type: string
        userAccountDto: 
          $ref: '#/components/schemas/UserAccountResourceDto'
        userAccountId: 
          format: int32
          type: integer
      description: 予約DTO
      type: object
    UserAccountResourceDto: 
      required:
      - id
      - loginId
      - password
      - userType
      properties:
        contact: 
          type: string
        id: 
          format: int32
          type: integer
        loginId: 
          type: string
        password: 
          type: string
        phoneNumber: 
          type: string
        userName: 
          type: string
        userType: 
          $ref: '#/components/schemas/UserType'
      description: ユーザDTO
      type: object
    UserType: 
      enum:
      - ADMIN
      - MEMBER
      type: string
    AddUserAccountDto: 
      required:
      - loginId
      - password
      - userName
      - userType
      properties:
        contact: 
          type: string
        loginId: 
          type: string
        password: 
          type: string
        phoneNumber: 
          type: string
        userName: 
          type: string
        userType: 
          $ref: '#/components/schemas/UserType'
      description: ユーザ登録用DTO
      type: object
    LoginDto: 
      required:
      - loginId
      - password
      properties:
        loginId: 
          maxLength: 10
          minLength: 5
          type: string
        password: 
          maxLength: 10
          minLength: 5
          type: string
      description: ログインDTO
      type: object
  responses:
    NotFound: 
      headers:
        Rms-Exception: 
          description: 発生例外のBusinessFlowExceptionが設定される
          required: true
          schema: 
            type: string
          style: simple
      content:
        application/json: 
          schema: 
            $ref: '#/components/schemas/GenericErrorInfo'
      description: 該当データがない場合
    ServerError: 
      headers:
        Rms-Exception: 
          description: 発生例外のRmsSystemExceptionが設定される
          required: true
          schema: 
            type: string
          style: simple
      content:
        application/json: 
          schema: 
            $ref: '#/components/schemas/GenericErrorInfo'
      description: アプリケーション内部でエラーが発生した場合
    Forbidden: 
      headers:
        Rms-Exception: 
          description: 発生例外のBusinessFlowExceptionが設定される
          required: true
          schema: 
            type: string
          style: simple
      content:
        application/json: 
          schema: 
            $ref: '#/components/schemas/GenericErrorInfo'
      description: 対象データに対する操作権限がない場合
    UnknownData: 
      headers:
        Rms-Exception: 
          description: 発生例外のBusinessFlowExceptionが設定される
          required: true
          schema: 
            type: string
          style: simple
      content:
        application/json: 
          schema: 
            $ref: '#/components/schemas/GenericErrorInfo'
      description: 処理対象データが存在しない場合
    DataDupricate: 
      headers:
        Rms-Exception: 
          description: 発生例外のBusinessFlowExceptionが設定される
          required: true
          schema: 
            type: string
          style: simple
      content:
        application/json: 
          schema: 
            $ref: '#/components/schemas/GenericErrorInfo'
      description: 登録データが既に登録されている
    ParameterError: 
      headers:
        Rms-Exception: 
          description: 発生例外のConstraintViolationExceptionが設定される
          required: true
          schema: 
            type: string
          style: simple
      content:
        application/json: 
          schema: 
            $ref: '#/components/schemas/ValidationErrorInfo'
      description: パラメータエラーの場合
info: 
  contact: 
    name: 豆ちゃん
    url: https://www.mamezou.com
  title: レンタル予約システムの公開API
  version: 0.0.1-SNAPSHOT
openapi: 3.0.1
paths:
  /memeval: 
    get: 
      tags:
      - SeverManagement API
      parameters:
      - 
        description: 評価方法。abs:絶対評価, rel:相対評価
        in: query
        name: method
        required: true
        schema: 
          type: string
      - 
        description: 閾値。絶対評価の場合は使用ヒープサイズ, 相対評価の場合はヒープの使用率、
        in: query
        name: val
        required: true
        schema: 
          format: int64
          type: integer
      description: /health/readyによるReadinessProbeのmemory-health-check-livenessのチェック方法を変更する
      operationId: resetEvaluateMethod
      responses:
        '200': 
          content:
            application/text:  {}
          description: 成功。常に"accepted."を返す
      summary: memory-health-check-livenessのチェック方法の変更
  /rms/items: 
    post: 
      tags:
      - Admin API
      description: 依頼されたレンタル品を登録する
      operationId: addRentalItem
      requestBody: 
        content:
          application/json: 
            schema: 
              $ref: '#/components/schemas/AddRentalItemDto'
      responses:
        '400': 
          $ref: '#/components/responses/ParameterError'
        '409': 
          $ref: '#/components/responses/DataDupricate'
        '500': 
          $ref: '#/components/responses/ServerError'
        '200': 
          content:
            application/json: 
              schema: 
                required:
                - id
                - serialNo
                properties:
                  id: 
                    format: int32
                    type: integer
                  itemName: 
                    type: string
                  serialNo: 
                    type: string
                description: レンタル品DTO
                type: object
          description: 登録成功
      summary: レンタル品を登録する
    get: 
      tags:
      - Member API
      description: 登録されているすべてのレンタル品を取得する
      operationId: getAllRentalItems
      responses:
        '200': 
          content:
            application/json: 
              schema: 
                items: 
                  $ref: '#/components/schemas/RentalItemResourceDto'
                type: array
          description: 検索結果
      summary: レンタル品の全件を取得する
  /rms/login: 
    post: 
      tags:
      - Authenticate API
      description: ログイン名とパスワードに一致するユーザを取得する
      operationId: authenticate
      requestBody: 
        content:
          application/json: 
            schema: 
              $ref: '#/components/schemas/LoginDto'
      responses:
        '400': 
          $ref: '#/components/responses/ParameterError'
        '404': 
          $ref: '#/components/responses/NotFound'
        '500': 
          $ref: '#/components/responses/ServerError'
        '200': 
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/UserAccountResourceDto'
          description: 認証成功
      summary: ユーザ認証を行う
    get: 
      tags:
      - Authenticate API
      parameters:
      - 
        description: ログインId
        in: query
        name: loginId
        required: true
        schema: 
          maxLength: 10
          minLength: 5
          type: string
      - 
        description: パスワード
        in: query
        name: password
        required: true
        schema: 
          maxLength: 10
          minLength: 5
          type: string
      description: ログイン名とパスワードに一致するユーザを取得する
      operationId: authenticate
      responses:
        '400': 
          $ref: '#/components/responses/ParameterError'
        '404': 
          $ref: '#/components/responses/NotFound'
        '500': 
          $ref: '#/components/responses/ServerError'
        '200': 
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/UserAccountResourceDto'
          description: 認証成功
      summary: ユーザ認証を行う（curlのテスト用）
  /rms/reservations: 
    post: 
      tags:
      - Member API
      description: 依頼された予約内容を登録する
      operationId: addReservation
      requestBody: 
        content:
          application/json: 
            schema: 
              $ref: '#/components/schemas/AddReservationDto'
      responses:
        '400': 
          $ref: '#/components/responses/ParameterError'
        '404': 
          $ref: '#/components/responses/UnknownData'
        '409': 
          $ref: '#/components/responses/DataDupricate'
        '500': 
          $ref: '#/components/responses/ServerError'
        '200': 
          content:
            application/json: 
              schema: 
                required:
                - endDateTime
                - id
                - rentalItemDto
                - rentalItemId
                - startDateTime
                - userAccountDto
                - userAccountId
                properties:
                  endDateTime: 
                    format: date-time
                    type: string
                  id: 
                    format: int32
                    type: integer
                  note: 
                    type: string
                  rentalItemDto: 
                    $ref: '#/components/schemas/RentalItemResourceDto'
                  rentalItemId: 
                    format: int32
                    type: integer
                  startDateTime: 
                    format: date-time
                    type: string
                  userAccountDto: 
                    $ref: '#/components/schemas/UserAccountResourceDto'
                  userAccountId: 
                    format: int32
                    type: integer
                description: 予約DTO
                type: object
          description: 登録成功
      summary: 予約を登録する
  /rms/reservations/item/{itemId}/startdate/{startDate}: 
    get: 
      tags:
      - Member API
      parameters:
      - 
        description: レンタル品ID
        in: path
        name: itemId
        required: true
        schema: 
          format: int32
          type: integer
      - 
        description: 利用開始日
        in: path
        name: startDate
        required: true
        schema: 
          example: '20201230'
          format: yyyyMMdd
          nullable: false
          type: string
      description: 指定されたレンタル品と利用開始日に一致する予約を検索する
      operationId: findReservationByRentalItemAndStartDate
      responses:
        '400': 
          $ref: '#/components/responses/ParameterError'
        '404': 
          $ref: '#/components/responses/NotFound'
        '500': 
          $ref: '#/components/responses/ServerError'
        '200': 
          content:
            application/json: 
              schema: 
                items: 
                  $ref: '#/components/schemas/ReservationResourceDto'
                type: array
          description: 検索結果
      summary: 指定されたレンタル品と利用開始日で予約を検索する
  /rms/reservations/own: 
    get: 
      tags:
      - Member API
      description: ログインユーザが予約者となっている予約の一覧を取得する。このAPIは/reservations/?reserverId={reserverId}のエイリアスとなっている
      operationId: getOwnReservations
      responses:
        '400': 
          $ref: '#/components/responses/ParameterError'
        '200': 
          content:
            application/json: 
              schema: 
                items: 
                  $ref: '#/components/schemas/ReservationResourceDto'
                type: array
          description: 検索結果
      summary: 自分の予約一覧を取得する
  /rms/reservations/reserver/{reserverId}: 
    get: 
      tags:
      - Member API
      parameters:
      - 
        description: ユーザID
        in: path
        name: reserverId
        required: true
        schema: 
          format: int32
          type: integer
      description: 指定されたユーザが予約者の予約を検索する。
      operationId: findReservationByReserverId
      responses:
        '400': 
          $ref: '#/components/responses/ParameterError'
        '500': 
          $ref: '#/components/responses/ServerError'
        '200': 
          content:
            application/json: 
              schema: 
                items: 
                  $ref: '#/components/schemas/ReservationResourceDto'
                type: array
          description: 検索結果
      summary: 指定されたユーザが予約者の予約を検索する
  /rms/reservations/{reservationId}: 
    delete: 
      tags:
      - Member API
      parameters:
      - 
        in: path
        name: reservationId
        required: true
        schema: 
          format: int32
          type: integer
      description: 依頼された予約IDに対する予約をキャンセルする。予約のキャンセルは予約した人しか行えない。他の人が予約キャンセルを行った場合は禁止操作としてエラーにする
      operationId: cancelReservation
      responses:
        '200': 
          description: 登録成功
        '400': 
          $ref: '#/components/responses/ParameterError'
        '404': 
          $ref: '#/components/responses/UnknownData'
        '409': 
          $ref: '#/components/responses/Forbidden'
        '500': 
          $ref: '#/components/responses/ServerError'
      summary: 予約をキャンセルする
  /rms/users: 
    post: 
      tags:
      - Admin API
      description: 依頼されたユーザを登録する
      operationId: addUserAccount
      requestBody: 
        content:
          application/json: 
            schema: 
              $ref: '#/components/schemas/AddUserAccountDto'
      responses:
        '400': 
          $ref: '#/components/responses/ParameterError'
        '409': 
          $ref: '#/components/responses/DataDupricate'
        '500': 
          $ref: '#/components/responses/ServerError'
        '200': 
          content:
            application/json: 
              schema: 
                required:
                - id
                - loginId
                - password
                - userType
                properties:
                  contact: 
                    type: string
                  id: 
                    format: int32
                    type: integer
                  loginId: 
                    type: string
                  password: 
                    type: string
                  phoneNumber: 
                    type: string
                  userName: 
                    type: string
                  userType: 
                    $ref: '#/components/schemas/UserType'
                description: ユーザDTO
                type: object
          description: 登録成功
      summary: ユーザを登録する
    get: 
      tags:
      - Member API
      description: 登録されているすべてのユーザを取得する
      operationId: getAllUserAccounts
      responses:
        '200': 
          content:
            application/json: 
              schema: 
                items: 
                  $ref: '#/components/schemas/UserAccountResourceDto'
                type: array
          description: 検索結果
      summary: ユーザの全件を取得する
    put: 
      tags:
      - Admin API
      description: 依頼されたユーザを更新する
      operationId: updateUserAccount
      requestBody: 
        content:
          application/json: 
            schema: 
              $ref: '#/components/schemas/UserAccountResourceDto'
      responses:
        '400': 
          $ref: '#/components/responses/ParameterError'
        '404': 
          $ref: '#/components/responses/UnknownData'
        '500': 
          $ref: '#/components/responses/ServerError'
        '200': 
          content:
            application/json: 
              schema: 
                required:
                - id
                - loginId
                - password
                - userType
                properties:
                  contact: 
                    type: string
                  id: 
                    format: int32
                    type: integer
                  loginId: 
                    type: string
                  password: 
                    type: string
                  phoneNumber: 
                    type: string
                  userName: 
                    type: string
                  userType: 
                    $ref: '#/components/schemas/UserType'
                description: ユーザDTO
                type: object
          description: 登録成功
      summary: ユーザを更新する
